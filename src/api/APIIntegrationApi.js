/**
 * APITemplate.io API Reference
 * # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePdfFromHtmlRequest from '../model/CreatePdfFromHtmlRequest';
import CreatePdfFromUrlRequest from '../model/CreatePdfFromUrlRequest';
import Error from '../model/Error';
import ResponseSuccessDeleteObject from '../model/ResponseSuccessDeleteObject';
import ResponseSuccessImageFile from '../model/ResponseSuccessImageFile';
import ResponseSuccessListObjects from '../model/ResponseSuccessListObjects';
import ResponseSuccessPDFFile from '../model/ResponseSuccessPDFFile';

/**
* APIIntegration service.
* @module api/APIIntegrationApi
* @version Version 2.0
*/
export default class APIIntegrationApi {

    /**
    * Constructs a new APIIntegrationApi. 
    * @alias module:api/APIIntegrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createImage operation.
     * @callback module:api/APIIntegrationApi~createImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSuccessImageFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Image
     * This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
     * @param {String} templateId Your template id, it can be obtained in the web console
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [outputImageType] - Output image type(JPEG or PNG format), default to `all`. Options are `all`, `jpegOnly`,`pngOnly`. 
     * @param {Number} [expiration] - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
     * @param {Number} [cloudStorage] - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
     * @param {String} [postactionS3Filekey] - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
     * @param {String} [postactionS3Bucket] - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
     * @param {String} [meta] - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
     * @param {module:api/APIIntegrationApi~createImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSuccessImageFile}
     */
    createImage(templateId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling createImage");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'template_id': templateId,
        'output_image_type': opts['outputImageType'],
        'expiration': opts['expiration'],
        'cloud_storage': opts['cloudStorage'],
        'postaction_s3_filekey': opts['postactionS3Filekey'],
        'postaction_s3_bucket': opts['postactionS3Bucket'],
        'meta': opts['meta']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseSuccessImageFile;
      return this.apiClient.callApi(
        '/v2/create-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPdf operation.
     * @callback module:api/APIIntegrationApi~createPdfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSuccessPDFFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a PDF
     * This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
     * @param {String} templateId Your template id, it can be obtained in the web console
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [exportType] - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
     * @param {Number} [expiration] - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
     * @param {String} [outputHtml] - Either `1` or `0`(Default). - To enable output of html content, set the value to `1` and it will return in the JSON response as html_url field (as a URL) 
     * @param {String} [outputFormat] - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
     * @param {String} [filename] - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
     * @param {String} [imageResampleRes] - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
     * @param {String} [isCmyk] - Use CMYK color profile, 1=true, 0=false. Default to '0' 
     * @param {Number} [cloudStorage] - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
     * @param {String} [pdfStandard] Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
     * @param {String} [postactionS3Filekey] - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
     * @param {String} [postactionS3Bucket] - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
     * @param {String} [meta] - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
     * @param {String} [async] - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
     * @param {String} [webhookUrl] - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
     * @param {module:api/APIIntegrationApi~createPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSuccessPDFFile}
     */
    createPdf(templateId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling createPdf");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPdf");
      }

      let pathParams = {
      };
      let queryParams = {
        'template_id': templateId,
        'export_type': opts['exportType'],
        'expiration': opts['expiration'],
        'output_html': opts['outputHtml'],
        'output_format': opts['outputFormat'],
        'filename': opts['filename'],
        'image_resample_res': opts['imageResampleRes'],
        'is_cmyk': opts['isCmyk'],
        'cloud_storage': opts['cloudStorage'],
        'pdf_standard': opts['pdfStandard'],
        'postaction_s3_filekey': opts['postactionS3Filekey'],
        'postaction_s3_bucket': opts['postactionS3Bucket'],
        'meta': opts['meta'],
        'async': opts['async'],
        'webhook_url': opts['webhookUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseSuccessPDFFile;
      return this.apiClient.callApi(
        '/v2/create-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPdfFromHtml operation.
     * @callback module:api/APIIntegrationApi~createPdfFromHtmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSuccessPDFFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a PDF from HTML
     * - This endpoint creates a PDF file from HTML with JSON data 
     * @param {module:model/CreatePdfFromHtmlRequest} createPdfFromHtmlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [exportType] - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
     * @param {Number} [expiration] - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
     * @param {String} [outputFormat] - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
     * @param {String} [filename] - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
     * @param {String} [imageResampleRes] - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
     * @param {String} [isCmyk] - Use CMYK color profile, 1=true, 0=false. Default to '0' 
     * @param {Number} [cloudStorage] - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
     * @param {String} [pdfStandard] Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
     * @param {String} [postactionS3Filekey] - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
     * @param {String} [postactionS3Bucket] - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
     * @param {String} [meta] - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
     * @param {String} [async] - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
     * @param {String} [webhookUrl] - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
     * @param {module:api/APIIntegrationApi~createPdfFromHtmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSuccessPDFFile}
     */
    createPdfFromHtml(createPdfFromHtmlRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPdfFromHtmlRequest;
      // verify the required parameter 'createPdfFromHtmlRequest' is set
      if (createPdfFromHtmlRequest === undefined || createPdfFromHtmlRequest === null) {
        throw new Error("Missing the required parameter 'createPdfFromHtmlRequest' when calling createPdfFromHtml");
      }

      let pathParams = {
      };
      let queryParams = {
        'export_type': opts['exportType'],
        'expiration': opts['expiration'],
        'output_format': opts['outputFormat'],
        'filename': opts['filename'],
        'image_resample_res': opts['imageResampleRes'],
        'is_cmyk': opts['isCmyk'],
        'cloud_storage': opts['cloudStorage'],
        'pdf_standard': opts['pdfStandard'],
        'postaction_s3_filekey': opts['postactionS3Filekey'],
        'postaction_s3_bucket': opts['postactionS3Bucket'],
        'meta': opts['meta'],
        'async': opts['async'],
        'webhook_url': opts['webhookUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseSuccessPDFFile;
      return this.apiClient.callApi(
        '/v2/create-pdf-from-html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPdfFromUrl operation.
     * @callback module:api/APIIntegrationApi~createPdfFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSuccessPDFFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a PDF from URL
     * - This endpoint creates a PDF file from a URL 
     * @param {module:model/CreatePdfFromUrlRequest} createPdfFromUrlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [exportType] - Either `file` or `json`(Default).   - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`   - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. 
     * @param {Number} [expiration] - Expiration of the generated PDF in minutes(default to `0`, store permanently)   - Use `0` to store on cdn permanently   - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF 
     * @param {String} [outputFormat] - Either `pdf`(Default) or `html`. - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL). 
     * @param {String} [filename] - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf` 
     * @param {String} [imageResampleRes] - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600. 
     * @param {String} [isCmyk] - Use CMYK color profile, 1=true, 0=false. Default to '0' 
     * @param {Number} [cloudStorage] - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`. 
     * @param {String} [pdfStandard] Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature) 
     * @param {String} [postactionS3Filekey] - This is to specify the file name for `Post Action(S3 Storage)`. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter 
     * @param {String} [postactionS3Bucket] - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`. 
     * @param {String} [meta] - Specify an external reference ID for your own reference. It appears in the `list-objects` API. 
     * @param {String} [async] - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If `async` is set to `1`, then `webhook_url` is mandatory 
     * @param {String} [webhookUrl] - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If `async` is set to `1`, then you have to specify the `webhook_url`.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`  - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url` - `[primary_url]`: The URL to the PDF document - `[transaction_ref]`: The transaction reference number - `[status]` : Status of the transaction, either `success` or `error` - `[message]` : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success 
     * @param {module:api/APIIntegrationApi~createPdfFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSuccessPDFFile}
     */
    createPdfFromUrl(createPdfFromUrlRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPdfFromUrlRequest;
      // verify the required parameter 'createPdfFromUrlRequest' is set
      if (createPdfFromUrlRequest === undefined || createPdfFromUrlRequest === null) {
        throw new Error("Missing the required parameter 'createPdfFromUrlRequest' when calling createPdfFromUrl");
      }

      let pathParams = {
      };
      let queryParams = {
        'export_type': opts['exportType'],
        'expiration': opts['expiration'],
        'output_format': opts['outputFormat'],
        'filename': opts['filename'],
        'image_resample_res': opts['imageResampleRes'],
        'is_cmyk': opts['isCmyk'],
        'cloud_storage': opts['cloudStorage'],
        'pdf_standard': opts['pdfStandard'],
        'postaction_s3_filekey': opts['postactionS3Filekey'],
        'postaction_s3_bucket': opts['postactionS3Bucket'],
        'meta': opts['meta'],
        'async': opts['async'],
        'webhook_url': opts['webhookUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseSuccessPDFFile;
      return this.apiClient.callApi(
        '/v2/create-pdf-from-url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteObject operation.
     * @callback module:api/APIIntegrationApi~deleteObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSuccessDeleteObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Object
     * Delete a PDF or an image from CDN and mark the transaction as deleted 
     * @param {String} transactionRef Object transaction reference
     * @param {module:api/APIIntegrationApi~deleteObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSuccessDeleteObject}
     */
    deleteObject(transactionRef, callback) {
      let postBody = null;
      // verify the required parameter 'transactionRef' is set
      if (transactionRef === undefined || transactionRef === null) {
        throw new Error("Missing the required parameter 'transactionRef' when calling deleteObject");
      }

      let pathParams = {
      };
      let queryParams = {
        'transaction_ref': transactionRef
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseSuccessDeleteObject;
      return this.apiClient.callApi(
        '/v2/delete-object', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listObjects operation.
     * @callback module:api/APIIntegrationApi~listObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSuccessListObjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Generated Objects
     * Retrieves all the generated PDFs and images 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Retrieve only the number of records specified. Default to 300
     * @param {String} [offset] Offset is used to skip the number of records from the results. Default to 0
     * @param {String} [templateId] Filtered by template id
     * @param {String} [transactionType] Filtered by transaction type, options are `PDF`, `JPEG` or `MERGE`
     * @param {module:api/APIIntegrationApi~listObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSuccessListObjects}
     */
    listObjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'template_id': opts['templateId'],
        'transaction_type': opts['transactionType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseSuccessListObjects;
      return this.apiClient.callApi(
        '/v2/list-objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
